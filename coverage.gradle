apply plugin: 'jacoco'

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
  jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
  def variantName = 'unbrandedDebug'
  def testType = "${variantName.capitalize()}UnitTest"
  def testTaskName = "test${testType}"

  tasks.create(name: "make${testType}CoverageReport", type: JacocoReport, dependsOn: testTaskName) {
    group = 'Reporting'
    description = "Generate Jacoco coverage report for the ${variantName} build."

    reports {
      html.enabled(true)
    }

    def excludes = [
      '**/R.class',
      '**/R$*.class',
      '**/BuildConfig.*',
      '**/Manifest*.*',
      '**/*Test*.*',
      'android/**/*.*',
      'androidx/**/*.*',
      '**/*_Factory.*',
      '**/*_Provide*Factory*.*',
      '**/*_ViewBinding*.*',
      '**/AutoValue_*.*',
      '**/R2.class',
      '**/R2$*.class',
      '**/*Directions$*',
      '**/*Directions.*',
      '**/*Binding.*'
    ]

    classDirectories.from = files(fileTree(
      dir: "${project.buildDir}/intermediates/javac/${variantName}/classes",
      excludes: excludes
    ))
    sourceDirectories.from = file("${project.projectDir}/src/main/java")
    executionData.from = file("${project.buildDir}/outputs/unit_test_code_coverage/${testType}/${testTaskName}.exec")
  }
}
